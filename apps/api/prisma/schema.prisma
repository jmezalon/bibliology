// Bibliology - Database Schema
// PostgreSQL database with Prisma ORM

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum LessonStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContentBlockType {
  HEADING
  TEXT
  IMAGE
  VERSE
  VOCABULARY
  LIST
  CALLOUT
  QUIZ
  DIVIDER
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  FILL_BLANK
  MATCHING
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
}

enum LessonProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum SlideLayout {
  TITLE
  CONTENT
  TWO_COLUMN
  IMAGE_FOCUS
  QUIZ
  BLANK
}

// ============================================================================
// USER MANAGEMENT
// ============================================================================

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password_hash String
  name          String
  role          UserRole @default(STUDENT)
  avatar_url    String?
  language_pref String   @default("en") // 'en' or 'fr'

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  last_login DateTime?

  // Relations
  courses_taught   Course[]           @relation("TeacherCourses")
  enrollments      Enrollment[]
  quiz_submissions QuizSubmission[]
  certificates     Certificate[]
  notes            StudentNote[]

  @@index([email])
  @@index([role])
  @@map("users")
}

// ============================================================================
// COURSE & LESSON STRUCTURE
// ============================================================================

model Course {
  id              String        @id @default(cuid())
  slug            String        @unique
  teacher_id      String

  // Bilingual fields
  title_en        String
  title_fr        String?
  description_en  String        @db.Text
  description_fr  String?       @db.Text

  // Media
  thumbnail_url   String?
  cover_image_url String?

  // Metadata
  status          LessonStatus  @default(DRAFT)
  category        String?       // 'Theology', 'Biblical Studies', etc.
  tags            String[]      // ['Pneumatology', 'Holy Spirit']
  estimated_hours Int?
  difficulty      String?       // 'Beginner', 'Intermediate', 'Advanced'

  // Timestamps
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  published_at    DateTime?

  // Relations
  teacher      User         @relation("TeacherCourses", fields: [teacher_id], references: [id], onDelete: Restrict)
  lessons      Lesson[]
  enrollments  Enrollment[]
  certificates Certificate[]

  @@index([teacher_id])
  @@index([status])
  @@index([slug])
  @@map("courses")
}

model Lesson {
  id              String       @id @default(cuid())
  slug            String       @unique
  course_id       String

  // Bilingual fields
  title_en        String
  title_fr        String?
  description_en  String?      @db.Text
  description_fr  String?      @db.Text

  // Ordering & metadata
  lesson_order    Int
  status          LessonStatus @default(DRAFT)
  estimated_minutes Int?

  // PowerPoint import tracking
  imported_from_pptx  Boolean @default(false)
  original_filename   String?
  import_date         DateTime?

  // Timestamps
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  published_at    DateTime?

  // Relations
  course           Course            @relation(fields: [course_id], references: [id], onDelete: Cascade)
  slides           Slide[]
  quizzes          Quiz[]
  lesson_progress  LessonProgress[]
  certificates     Certificate[]

  @@unique([course_id, lesson_order])
  @@index([course_id])
  @@index([status])
  @@index([slug])
  @@map("lessons")
}

model Slide {
  id          String      @id @default(cuid())
  lesson_id   String

  slide_order Int
  layout      SlideLayout @default(CONTENT)

  // Bilingual fields
  title_en    String?
  title_fr    String?
  notes_en    String?     @db.Text  // Teacher notes
  notes_fr    String?     @db.Text

  // Timestamps
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  // Relations
  lesson         Lesson         @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  content_blocks ContentBlock[]
  quizzes        Quiz[]

  @@unique([lesson_id, slide_order])
  @@index([lesson_id])
  @@index([updated_at]) // For sorting by recent changes
  @@map("slides")
}

model ContentBlock {
  id           String           @id @default(cuid())
  slide_id     String

  block_order  Int
  block_type   ContentBlockType

  // Content stored as JSONB (varies by type)
  content_en   Json
  content_fr   Json?

  // Styling configuration (also JSONB)
  style_config Json?  // { fontSize, color, alignment, etc. }

  // Timestamps
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt

  // Relations
  slide Slide @relation(fields: [slide_id], references: [id], onDelete: Cascade)

  @@unique([slide_id, block_order])
  @@index([slide_id])
  @@index([block_type])
  @@index([updated_at]) // For sorting by recent changes
  @@map("content_blocks")
}

// ============================================================================
// QUIZ & ASSESSMENT
// ============================================================================

model Quiz {
  id         String   @id @default(cuid())
  lesson_id  String
  slide_id   String?  // Optional: quiz can be at end of lesson or on slide

  // Bilingual fields
  title_en   String
  title_fr   String?

  // Configuration
  passing_score_percentage Int @default(70)
  time_limit_minutes       Int?
  shuffle_questions        Boolean @default(false)
  shuffle_options          Boolean @default(false)
  allow_review             Boolean @default(true)
  show_correct_answers     Boolean @default(true)
  max_attempts             Int?

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  lesson      Lesson           @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  slide       Slide?           @relation(fields: [slide_id], references: [id], onDelete: Cascade)
  questions   Question[]
  submissions QuizSubmission[]

  @@index([lesson_id])
  @@index([slide_id])
  @@map("quizzes")
}

model Question {
  id              String       @id @default(cuid())
  quiz_id         String

  question_order  Int
  question_type   QuestionType

  // Bilingual fields (stored as JSONB for rich formatting)
  question_text_en Json
  question_text_fr Json?

  // Options (for MCQ, matching, etc.)
  options_en       Json?  // Array of option strings/objects
  options_fr       Json?

  // Correct answer(s)
  correct_answers  Json   // Format varies by question type

  // Explanation
  explanation_en   Json?
  explanation_fr   Json?

  // Scoring
  points           Int    @default(1)

  // Timestamps
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  // Relations
  quiz     Quiz             @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  answers  QuestionAnswer[]

  @@unique([quiz_id, question_order])
  @@index([quiz_id])
  @@map("questions")
}

model QuizSubmission {
  id               String   @id @default(cuid())
  quiz_id          String
  student_id       String

  // Scoring
  score_percentage Int
  points_earned    Int
  total_points     Int
  passed           Boolean

  // Timing
  time_spent_seconds Int?

  // Timestamps
  started_at    DateTime  @default(now())
  submitted_at  DateTime?
  updated_at    DateTime  @updatedAt

  // Relations
  quiz     Quiz             @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  student  User             @relation(fields: [student_id], references: [id], onDelete: Cascade)
  answers  QuestionAnswer[]

  @@index([quiz_id])
  @@index([student_id])
  @@index([submitted_at])
  @@map("quiz_submissions")
}

model QuestionAnswer {
  id            String  @id @default(cuid())
  submission_id String
  question_id   String

  // Answer given by student (format varies by question type)
  answer_given  Json

  // Grading
  is_correct    Boolean
  points_earned Int

  // Timestamps
  answered_at   DateTime @default(now())

  // Relations
  submission QuizSubmission @relation(fields: [submission_id], references: [id], onDelete: Cascade)
  question   Question       @relation(fields: [question_id], references: [id], onDelete: Cascade)

  @@unique([submission_id, question_id])
  @@index([submission_id])
  @@index([question_id])
  @@map("question_answers")
}

// ============================================================================
// PROGRESS TRACKING
// ============================================================================

model Enrollment {
  id                  String           @id @default(cuid())
  student_id          String
  course_id           String

  status              EnrollmentStatus @default(ACTIVE)

  // Denormalized progress (updated by triggers/app logic)
  progress_percentage Int              @default(0)
  lessons_completed   Int              @default(0)
  total_lessons       Int              @default(0)

  // Timestamps
  enrolled_at         DateTime         @default(now())
  last_accessed_at    DateTime         @default(now())
  completed_at        DateTime?

  // Relations
  student         User             @relation(fields: [student_id], references: [id], onDelete: Cascade)
  course          Course           @relation(fields: [course_id], references: [id], onDelete: Cascade)
  lesson_progress LessonProgress[]

  @@unique([student_id, course_id])
  @@index([student_id])
  @@index([course_id])
  @@index([status])
  @@map("enrollments")
}

model LessonProgress {
  id              String               @id @default(cuid())
  enrollment_id   String
  lesson_id       String

  status          LessonProgressStatus @default(NOT_STARTED)

  // Progress tracking
  current_slide_index   Int @default(0)
  total_slides_viewed   Int @default(0)
  time_spent_seconds    Int @default(0)

  // Timestamps
  started_at    DateTime  @default(now())
  completed_at  DateTime?
  updated_at    DateTime  @updatedAt

  // Relations
  enrollment Enrollment @relation(fields: [enrollment_id], references: [id], onDelete: Cascade)
  lesson     Lesson     @relation(fields: [lesson_id], references: [id], onDelete: Cascade)

  @@unique([enrollment_id, lesson_id])
  @@index([enrollment_id])
  @@index([lesson_id])
  @@index([status])
  @@map("lesson_progress")
}

// ============================================================================
// STUDENT FEATURES
// ============================================================================

model StudentNote {
  id         String   @id @default(cuid())
  student_id String
  lesson_id  String
  slide_index Int

  // Note content
  note_text  String   @db.Text

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  student User   @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([student_id])
  @@index([lesson_id])
  @@map("student_notes")
}

model Certificate {
  id              String   @id @default(cuid())
  user_id         String
  course_id       String?
  lesson_id       String?  // Can be for course completion or single lesson

  // Certificate data
  certificate_url String   // S3 URL to PDF
  certificate_number String @unique  // Unique certificate number

  // Timestamps
  issued_at       DateTime @default(now())

  // Relations
  user   User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course Course? @relation(fields: [course_id], references: [id], onDelete: SetNull)
  lesson Lesson? @relation(fields: [lesson_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([course_id])
  @@index([issued_at])
  @@map("certificates")
}

// ============================================================================
// SYSTEM TABLES
// ============================================================================

model ActivityLog {
  id         String   @id @default(cuid())
  user_id    String?

  // Activity details
  action     String   // 'LOGIN', 'CREATE_LESSON', 'SUBMIT_QUIZ', etc.
  entity_type String? // 'lesson', 'quiz', 'course'
  entity_id  String?

  // Metadata
  ip_address String?
  user_agent String?
  metadata   Json?    // Additional context

  // Timestamps
  created_at DateTime @default(now())

  @@index([user_id])
  @@index([action])
  @@index([created_at])
  @@map("activity_logs")
}
