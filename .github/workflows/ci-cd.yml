name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production

# Cancel in-progress runs for PRs, but not for pushes to main/develop
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # ==================== Quality Checks ====================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm db:generate

      - name: Lint
        run: pnpm lint

      - name: Type check
        run: pnpm typecheck

      - name: Format check
        run: pnpm format:check

      - name: Check for console logs (warning only)
        run: |
          if grep -r "console\\.log" apps/web/src apps/api/src --include="*.ts" --include="*.tsx" --exclude-dir=node_modules; then
            echo "⚠️  Warning: console.log statements found (should be removed before production)"
          fi
        continue-on-error: true

  # ==================== Security Checks ====================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Check for secrets (using basic grep)
        run: |
          echo "Checking for potential secrets..."
          if grep -r -i "password.*=.*['\"]" apps/ --include="*.ts" --include="*.tsx" --exclude-dir=node_modules | grep -v ".example" | grep -v "PASSWORD"; then
            echo "❌ Potential hardcoded credentials found!"
            exit 1
          fi
          echo "✅ No obvious secrets found"

  # ==================== Unit Tests ====================
  test-unit:
    name: Unit Tests (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: ['18', '20']
      fail-fast: false

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bibliology_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm db:generate

      - name: Run database migrations
        run: cd apps/api && pnpm db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bibliology_test

      - name: Run unit tests
        run: pnpm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bibliology_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret
          JWT_REFRESH_SECRET: test-refresh-secret

      - name: Generate coverage report
        if: matrix.node-version == '20'
        run: cd apps/api && pnpm test:cov:unit
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bibliology_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret
          JWT_REFRESH_SECRET: test-refresh-secret

      - name: Upload coverage to Codecov
        if: matrix.node-version == '20'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./apps/api/coverage/coverage-final.json
          flags: unittests
          fail_ci_if_error: false

  # ==================== Build Verification ====================
  build:
    name: Build All Packages
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm db:generate

      - name: Build all packages
        run: pnpm build

      - name: Check build artifacts
        run: |
          echo "=== API Build ==="
          ls -lh apps/api/dist/ | head -20
          echo ""
          echo "=== Web Build ==="
          ls -lh apps/web/dist/ | head -20
          echo ""
          echo "=== Web Bundle Size ==="
          du -sh apps/web/dist/

      - name: Upload API build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: api-build
          path: apps/api/dist/
          retention-days: 7

      - name: Upload Web build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: apps/web/dist/
          retention-days: 7

  # ==================== E2E Tests ====================
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bibliology_e2e
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm db:generate

      - name: Run database migrations
        run: cd apps/api && pnpm db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bibliology_e2e

      - name: Seed database
        run: cd apps/api && pnpm db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bibliology_e2e

      - name: Run E2E tests
        run: cd apps/api && pnpm test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bibliology_e2e
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret
          JWT_REFRESH_SECRET: test-refresh-secret

  # ==================== Database Migration Check ====================
  migration-check:
    name: Database Migration Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bibliology_migration
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm db:generate

      - name: Check for pending migrations
        run: |
          cd apps/api
          # Deploy all migrations
          pnpm db:migrate
          # Check if schema is in sync
          npx prisma migrate status
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bibliology_migration

      - name: Validate migrations are reversible
        run: |
          echo "⚠️  Remember: All migrations should be reversible!"
          echo "Check that you have down migrations or can safely rollback"

  # ==================== Deploy to Staging ====================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality, security, test-unit, build]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: ${{ secrets.STAGING_WEB_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      # Deploy API to Staging
      - name: Deploy API to Render (Staging)
        run: |
          echo "Triggering Render staging deployment..."
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_API_STAGING }}" \
            -H "Content-Type: application/json"

      - name: Wait for API deployment
        run: |
          echo "Waiting for API deployment to complete..."
          sleep 90

      - name: Run database migrations (Staging)
        run: |
          cd apps/api
          pnpm install --frozen-lockfile
          pnpm db:generate
          pnpm db:migrate
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: API Health check
        run: |
          for i in {1..15}; do
            if curl -f "${{ secrets.STAGING_API_URL }}/health" > /dev/null 2>&1; then
              echo "✅ API is healthy!"
              exit 0
            fi
            echo "Attempt $i: API not ready yet, waiting..."
            sleep 10
          done
          echo "❌ API health check failed"
          exit 1

      # Deploy Frontend to Staging
      - name: Install Vercel CLI
        run: pnpm add -g vercel@latest

      - name: Deploy Web to Vercel (Staging)
        run: |
          cd apps/web
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEB }}

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          # Check critical endpoints
          curl -f "${{ secrets.STAGING_API_URL }}/health" || exit 1
          echo "✅ Smoke tests passed!"

      - name: Notify deployment success
        if: success()
        run: |
          echo "🎉 Staging deployment successful!"
          echo "API: ${{ secrets.STAGING_API_URL }}"
          echo "Web: ${{ secrets.STAGING_WEB_URL }}"

  # ==================== Deploy to Production ====================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [quality, security, test-unit, build, test-e2e]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: ${{ secrets.PRODUCTION_WEB_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      # Backup database before deployment
      - name: Trigger database backup
        run: |
          echo "📦 Database backup should be triggered here"
          echo "Ensure you have automated backups configured on Render"
          # You can add a backup webhook or script here

      # Deploy API to Production
      - name: Deploy API to Render (Production)
        run: |
          echo "Triggering Render production deployment..."
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_API }}" \
            -H "Content-Type: application/json"

      - name: Wait for API deployment
        run: |
          echo "Waiting for API deployment to complete..."
          sleep 120

      # Run migrations with safety checks
      - name: Run database migrations (Production)
        run: |
          cd apps/api
          pnpm install --frozen-lockfile
          pnpm db:generate

          # Check migration status first
          npx prisma migrate status || true

          # Deploy migrations
          pnpm db:migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: API Health check
        run: |
          for i in {1..20}; do
            if curl -f "${{ secrets.API_URL }}/health" > /dev/null 2>&1; then
              echo "✅ API is healthy!"
              exit 0
            fi
            echo "Attempt $i: API not ready yet, waiting..."
            sleep 15
          done
          echo "❌ API health check failed"
          exit 1

      # Deploy Frontend to Production
      - name: Install Vercel CLI
        run: pnpm add -g vercel@latest

      - name: Deploy Web to Vercel (Production)
        run: |
          cd apps/web
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          DEPLOY_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "DEPLOY_URL=$DEPLOY_URL" >> $GITHUB_ENV
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEB }}
          VITE_API_URL: ${{ secrets.API_URL }}

      # Deploy Worker to Production
      - name: Deploy Worker to Render (Production)
        run: |
          echo "Triggering Render worker deployment..."
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_WORKER }}" \
            -H "Content-Type: application/json"
        continue-on-error: true

      # Post-deployment validation
      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment validation..."

          # Check API health with full response
          API_HEALTH=$(curl -f "${{ secrets.API_URL }}/health")
          echo "API Health: $API_HEALTH"

          # Check if database is connected
          if echo "$API_HEALTH" | grep -q "connected"; then
            echo "✅ Database connection verified"
          else
            echo "❌ Database connection failed"
            exit 1
          fi

          # Check frontend loads
          if curl -f "${{ secrets.PRODUCTION_WEB_URL }}" > /dev/null 2>&1; then
            echo "✅ Frontend is accessible"
          else
            echo "⚠️  Frontend check inconclusive"
          fi

      - name: Monitor for errors (30 minutes)
        run: |
          echo "🔍 Monitoring deployment for 30 seconds..."
          sleep 30

          # Check health again
          if curl -f "${{ secrets.API_URL }}/health" > /dev/null 2>&1; then
            echo "✅ Deployment stable"
          else
            echo "⚠️  Health check warning"
          fi

      - name: Create deployment tag
        if: success()
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          TAG_NAME="deploy-$(date +%Y%m%d-%H%M%S)"
          git tag -a "$TAG_NAME" -m "Production deployment $TAG_NAME"
          git push origin "$TAG_NAME" || echo "Failed to push tag"

      - name: Notify deployment success
        if: success()
        run: |
          echo "🎉 Production deployment successful!"
          echo "API: ${{ secrets.API_URL }}"
          echo "Web: ${{ secrets.PRODUCTION_WEB_URL }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deployed by: ${{ github.actor }}"

  # ==================== Rollback Job (Manual) ====================
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    environment:
      name: production

    steps:
      - name: Rollback notice
        run: |
          echo "⚠️  ROLLBACK INITIATED"
          echo "To rollback:"
          echo "1. Vercel: Visit Vercel dashboard and rollback to previous deployment"
          echo "2. Render: Visit Render dashboard and rollback API service"
          echo "3. Database: If needed, run: npx prisma migrate resolve --rolled-back [migration-name]"
          echo ""
          echo "See DEPLOYMENT.md for detailed rollback procedures"

  # ==================== Deployment Summary ====================
  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [quality, security, test-unit, build]
    if: always() && github.event_name != 'workflow_dispatch'

    steps:
      - name: Generate summary
        run: |
          echo "## 📊 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- Quality: ${{ needs.quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ needs.test-unit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
